blueprint:
  name: Trigger light with Z-Push remote
  description: Toggle lights or switches with a Z-Push remote, or dim lights by holding the button down.
  domain: automation
  input:
    push_device:
      name: HeatIt Z-Push device
      description: The Z-Push switch device to use as a remote.
      selector:
        device:
          integration: zwave_js
          # manufacturer: Future Home AS
    targets:
      name: Button targets
      description: Which light or switch to control for the buttons on the device. The ordering of devices here will correspond with the button ordering on your device.
      selector:
        entity:
          multiple: true
          domain:
            - light
            - switch

mode: single

variables:
  targets: !input targets

trigger:
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input push_device
      value: "KeyPressed"
    id: key_pressed_trigger
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      device_id: !input push_device
      value: "KeyHeldDown"
    id: dim_trigger

action:
  - variables:
      button_group: "{{(trigger.event.data.property_key | int / 2) | round(0, 'ceil') }}"
      on_or_off: "{{(trigger.event.data.property_key | int % 2) | round(0, 'ceil') | bool }}"
  - if:
      - alias: "No entity for button"
        condition: template
        value_template: |
          {{ (button_group | int) > ( targets | length ) }}
    then:
      - stop: "The button number does not have a target."
  - alias: "Set target variable"
    variables:
      target: |
        {{ targets[ button_group - 1 ] }}
  - variables:
      target_domain: |
        {{ states[ target ].domain }}
  - choose:
      - conditions:
          - condition: trigger
            id: key_pressed_trigger
        sequence:
          - service: |
              {{ target_domain }}.turn_{{'on' if on_or_off else 'off'}}
            target:
              entity_id: |
                {{ target }}
      - conditions:
          - condition: trigger
            id: dim_trigger
          - "{{ target_domain == 'light' }}"
        sequence:
          - repeat:
              until: "{{ wait.trigger is not none or repeat.index >= 30 }}"
              sequence:
                - service: light.turn_on
                  target:
                    entity_id: |
                      {{ target }}
                  data_template:
                    brightness_step_pct: |
                      {{ 4 if on_or_off else -4 }}
                - wait_for_trigger:
                    platform: event
                    event_type: zwave_js_value_notification
                    event_data:
                      device_id: !input push_device
                      value: "KeyReleased"
                  timeout:
                    milliseconds: 150
