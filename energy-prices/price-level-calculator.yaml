blueprint:
  name: Price level calculator
  description: |
    Calculates the current price level from todays and tomorrows prices. 
    It needs a sensor that has two specific attributes, `today` and `tomorrow`, that tells the prices for the next one or two days.
    These will be used together with the grid rent prices given below. The grid rent prices assumes price periods 06-22 and 22-06.
  domain: automation
  input:
    select_entity:
      name: Input selector
      description: An input select entity that with selection between `VERY_CHEAP`, `CHEAP`, `NORMAL`, `EXPENSIVE` or `VERY_EXPENSIVE`.
      selector:
        entity:
          domain: input_select
    prices_entity:
      name: Prices entity
      description: A sensor entity that contains price arrays for today and tomorrow. Such as the price entity from nordpool.
      selector:
        entity:
          domain: sensor
          integration: nordpool
    nettleie_price_day:
      name: Nettleie price day
      default: 0.49
      selector:
        number:
          min: 0.01
          max: 2.34
          mode: box
          step: 0.0001
          unit_of_measurement: NOK
    nettleie_price_night:
      name: Nettleie price night and weekends
      default: 0.39
      selector:
        number:
          min: 0.01
          max: 2.34
          mode: box
          step: 0.0001
          unit_of_measurement: NOK

trigger:
  - platform: state
    entity_id: !input prices_entity

variables:
  select_entity: !input select_entity
  prices_entity: !input prices_entity
  nettleie_price_day: !input nettleie_price_day
  nettleie_price_night: !input nettleie_price_night

action:
  - alias: Find all the prices
    variables:
      nettleie_td: "{{ ([nettleie_price_night]*25) if now().isoweekday() > 5 else ([nettleie_price_night]*6 + [nettleie_price_day]*(24-6-2) + [nettleie_price_night]*2) }}"
      nettleie_tm: "{{ ([nettleie_price_night]*25) if now().isoweekday() + 1 > 5 and now().isoweekday() + 1 != 8 else ([nettleie_price_night]*6 + [nettleie_price_day]*(24-6-2) + [nettleie_price_night]*2) }}"
      today: "{{ state_attr(prices_entity, 'today') | reject('none') | list }}"
      tomorrow: "{{ state_attr(prices_entity, 'tomorrow') | reject('none') | list }}"
  - service: system_log.write
    data:
      message: |
        Nettleie today: {{ nettleie_td }}
        Nettleie tomorrow: {{ nettleie_td }}
        Price today: {{ today }}
        Price tomorrow: {{ tomorrow }}
      level: debug
  - alias: Set prices with nettleie
    variables:
      today_wn: |
        {%- set ns = namespace() -%}
        {%- set ns.today_wn = [] -%}
        {# Calculate in nettleie #}
        {%- for i in range(25) -%}
          {%- if today | count > i -%}
            {%- set ns.today_wn = ns.today_wn + [ (today[i] + nettleie_td[i]) | round(3) ] -%}
          {%- endif -%}
        {%- endfor -%}
        {{ ns.today_wn }}
      tomorrow_wn: |
        {%- set ns = namespace() -%}
        {%- set ns.tomorrow_wn = [] -%}
        {# Calculate in nettleie #}
        {%- for i in range(25) -%}
          {%- if tomorrow | count > i -%}
            {%- set ns.tomorrow_wn = ns.tomorrow_wn + [ (tomorrow[i] + nettleie_tm[i]) | round(3) ] -%}
          {%- endif -%}
        {%- endfor -%}
        {{ ns.tomorrow_wn }}
  - alias: Make a list with all the prices
    variables:
      all: "{{ today_wn + tomorrow_wn }}"
  - service: system_log.write
    data:
      message: |
        Kalkulert total prislister:
        Today: {{ today_wn }} 
        Tomorrow: {{ tomorrow_wn }}
        All: {{ all }}
      level: debug
  - alias: Find the extremas and the difference
    variables:
      max: "{{ all | max }}"
      min: "{{ all | min }}"
      diff: "{{ max - min }}"
  - service: system_log.write
    data:
      message: |
        Kalkulert total priser:
        Max: {{ max }} 
        Min: {{ min }}
        Diff: {{ diff }}
      level: debug
  - alias: Find the price level
    variables:
      price_level: |
        {%- set current_price = (states(prices_entity) | float) + (nettleie_td[ now().hour ] | float) -%}
        {%- if current_price < ((diff * 0.15) + min) -%}
          VERY_CHEAP
        {%- elif current_price < ((diff * 0.35) + min) -%}
          CHEAP
        {%- elif current_price > ((diff * 0.85) + min) -%}
          VERY_EXPENSIVE
        {%- elif current_price > ((diff * 0.65) + min) -%}
          EXPENSIVE
        {%- else -%}
          NORMAL
        {%- endif -%}
  - service: system_log.write
    data:
      message: |
        Found the following price level: {{ price_level }}
      level: debug
  - service: input_select.select_option
    data:
      option: "{{ price_level }}"
    target:
      entity_id: !input select_entity
